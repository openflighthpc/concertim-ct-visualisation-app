

Facade Classes 


**********************************************************************
1. Introduction

The facade pattern has one very simple purpose: to provide a simpler
interface to a large or complex object.

It is architecturally very similar to the presenter pattern - all you 
are really doing is creating a wrapper for an existing object.


**********************************************************************
2. Implementation

* Facades go into the "facades" folder of an engine.

* Facades should be named XXXFacade, where "XXX" is the name of 
  the subject being re-interfaced.

* Facades should inherit from Facade.

* Presenters are constructed by default with one argument:

  => The object being re-interfaced

* Within a facade you have access to one "convinience method" called "o".

  => o: is a reference to the object being re-interfaced

  Why use "o"?  Because that's what draper uses and it's short/sweet/standard.


**********************************************************************
3. Further Reading

Wikipedia entry on the facade pattern
http://en.wikipedia.org/wiki/Facade_pattern

Particular use case for us: wrapping memcache values.

